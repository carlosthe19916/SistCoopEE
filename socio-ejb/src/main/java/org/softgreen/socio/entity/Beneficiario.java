package org.softgreen.socio.entity;

// Generated 02-may-2014 11:48:28 by Hibernate Tools 4.0.0

import java.math.BigDecimal;

import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;

/**
 * Beneficiario generated by hbm2java
 */
@Entity
@Table(indexes = { @Index(columnList = "id") })
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "type", discriminatorType = DiscriminatorType.STRING)
@DiscriminatorValue("beneficiario")
public class Beneficiario extends PersonaNatural implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;
	private BigDecimal porcentajeBeneficio;

	public Beneficiario() {
	}

	@Id
	@GeneratedValue(generator = "SgGenericGenerator")
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@NotNull
	@Size(min = 1, max = 50)
	@NotEmpty
	@NotBlank
	public String getApellidoPaterno() {
		return super.getApellidoPaterno();
	}

	public void setApellidoPaterno(String apellidoPaterno) {
		super.setApellidoPaterno(apellidoPaterno);
	}

	@NotNull
	@Size(min = 1, max = 50)
	@NotEmpty
	@NotBlank
	public String getApellidoMaterno() {
		return super.getApellidoMaterno();
	}

	public void setApellidoMaterno(String apellidoMaterno) {
		super.setApellidoMaterno(apellidoMaterno);
	}

	@NotNull
	@Size(min = 1, max = 70)
	@NotEmpty
	@NotBlank
	public String getNombres() {
		return super.getNombres();
	}

	public void setNombres(String nombres) {
		super.setNombres(nombres);
	}

	@NotNull
	@Min(value = 0)
	@Max(value = 100)
	@DecimalMin(value = "0")
	@DecimalMax(value = "100")
	@Digits(integer = 3, fraction = 2)
	public BigDecimal getPorcentajeBeneficio() {
		return porcentajeBeneficio;
	}

	public void setPorcentajeBeneficio(BigDecimal porcentajeBeneficio) {
		this.porcentajeBeneficio = porcentajeBeneficio;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((super.getApellidoMaterno() == null) ? 0 : super.getApellidoMaterno().hashCode());
		result = prime * result + ((super.getApellidoPaterno() == null) ? 0 : super.getApellidoPaterno().hashCode());
		result = prime * result + ((super.getNombres() == null) ? 0 : super.getNombres().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Beneficiario))
			return false;
		Beneficiario other = (Beneficiario) obj;
		if (super.getApellidoMaterno() == null) {
			if (other.getApellidoMaterno() != null)
				return false;
		} else if (!super.getApellidoMaterno().equals(other.getApellidoMaterno()))
			return false;
		if (super.getApellidoPaterno() == null) {
			if (other.getApellidoPaterno() != null)
				return false;
		} else if (!super.getApellidoPaterno().equals(other.getApellidoPaterno()))
			return false;
		if (super.getNombres() == null) {
			if (other.getNombres() != null)
				return false;
		} else if (!super.getNombres().equals(other.getNombres()))
			return false;
		return true;
	}

}

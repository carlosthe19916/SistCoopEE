var public_vars = public_vars || {};(function($, window, undefined) {    'use strict';    $(document).ready(function() {        $('body').on('click', 'a[rel="go-top"]', function(ev) {            ev.preventDefault();            var obj = {                pos: $(window).scrollTop()            };            TweenLite.to(obj, .3, {                pos: 0,                ease: Power4.easeOut,                onUpdate: function() {                    $(window).scrollTop(obj.pos);                }            });        });        $('body').on('click', '.panel a[data-toggle="remove"]', function(ev) {            ev.preventDefault();            var $panel = $(this).closest('.panel'),                $panel_parent = $panel.parent();            $panel.remove();            if ($panel_parent.children().length == 0) {                $panel_parent.remove();            }        });        $('body').on('click', '.panel a[data-toggle="reload"]', function(ev) {            ev.preventDefault();            var $panel = $(this).closest('.panel');            $panel.append('<div class="panel-disabled"><div class="loader-1"></div></div>');            var $pd = $panel.find('.panel-disabled');            setTimeout(function() {                $pd.fadeOut('fast', function() {                    $pd.remove();                });            }, 500 + 300 * (Math.random() * 5));        });        $('body').on('click', '.panel a[data-toggle="panel"]', function(ev) {            ev.preventDefault();            var $panel = $(this).closest('.panel');            $panel.toggleClass('collapsed');        });        $('[data-loading-text]').each(function(i, el) {            var $this = $(el);            $this.on('click', function(ev) {                $this.button('loading');                setTimeout(function() {                    $this.button('reset');                }, 1800);            });        });    });})(jQuery, window);var sm_duration = .2,    sm_transition_delay = 150;function setup_sidebar_menu() {    if (public_vars.$sidebarMenu.length) {        var $items_with_subs = public_vars.$sidebarMenu.find('li:has(> ul)'),            toggle_others = public_vars.$sidebarMenu.hasClass('toggle-others');        $items_with_subs.filter('.active').addClass('expanded');        $items_with_subs.each(function(i, el) {            var $li = jQuery(el),                $a = $li.children('a'),                $sub = $li.children('ul');            $a.on('click', function(ev) {                ev.preventDefault();                if (toggle_others) {                    sidebar_menu_close_items_siblings($li);                }                if ($li.hasClass('expanded') || $li.hasClass('opened'))                    sidebar_menu_item_collapse($li, $sub);                else                    sidebar_menu_item_expand($li, $sub);            });        });    }}function sidebar_menu_item_expand($li, $sub) {    if ($li.data('is-busy') || ($li.parent('.main-menu').length && public_vars.$sidebarMenu.hasClass('collapsed')))        return;    $li.addClass('expanded').data('is-busy', true);    $sub.show();    var $sub_items = $sub.children(),        sub_height = $sub.outerHeight(),        win_y = jQuery(window).height(),        total_height = $li.outerHeight(),        current_y = public_vars.$sidebarMenu.scrollTop(),        item_max_y = $li.position().top + current_y,        fit_to_viewpport = public_vars.$sidebarMenu.hasClass('fit-in-viewport');    $sub_items.addClass('is-hidden');    $sub.height(0);    TweenMax.to($sub, sm_duration, {        css: {            height: sub_height        },        onUpdate: ps_update,        onComplete: function() {            $sub.height('');        }    });    var interval_1 = $li.data('sub_i_1'),        interval_2 = $li.data('sub_i_2');    window.clearTimeout(interval_1);    interval_1 = setTimeout(function() {        $sub_items.each(function(i, el) {            var $sub_item = jQuery(el);            $sub_item.addClass('is-shown');        });        var finish_on = sm_transition_delay * $sub_items.length,            t_duration = parseFloat($sub_items.eq(0).css('transition-duration')),            t_delay = parseFloat($sub_items.last().css('transition-delay'));        if (t_duration && t_delay) {            finish_on = (t_duration + t_delay) * 1000;        }        window.clearTimeout(interval_2);        interval_2 = setTimeout(function() {            $sub_items.removeClass('is-hidden is-shown');        }, finish_on);        $li.data('is-busy', false);    }, 0);    $li.data('sub_i_1', interval_1), $li.data('sub_i_2', interval_2);}function sidebar_menu_item_collapse($li, $sub) {    if ($li.data('is-busy'))        return;    var $sub_items = $sub.children();    $li.removeClass('expanded').data('is-busy', true);    $sub_items.addClass('hidden-item');    TweenMax.to($sub, sm_duration, {        css: {            height: 0        },        onUpdate: ps_update,        onComplete: function() {            $li.data('is-busy', false).removeClass('opened');            $sub.attr('style', '').hide();            $sub_items.removeClass('hidden-item');            $li.find('li.expanded ul').attr('style', '').hide().parent().removeClass('expanded');            ps_update(true);        }    });}function sidebar_menu_close_items_siblings($li) {    $li.siblings().not($li).filter('.expanded, .opened').each(function(i, el) {        var $_li = jQuery(el),            $_sub = $_li.children('ul');        sidebar_menu_item_collapse($_li, $_sub);    });}function setup_horizontal_menu() {    public_vars.$horizontalNavbar = public_vars.$body.find('.navbar.horizontal-menu');    public_vars.$horizontalMenu = public_vars.$horizontalNavbar.find('.navbar-nav');    if (public_vars.$horizontalMenu.length) {        var $items_with_subs = public_vars.$horizontalMenu.find('li:has(> ul)'),            click_to_expand = public_vars.$horizontalNavbar.hasClass('click-to-expand');        if (click_to_expand) {            $('.main-content, .sidebar-menu').on('click', function(ev) {                $items_with_subs.removeClass('hover');            });        }        $items_with_subs.each(function(i, el) {            var $li = jQuery(el),                $a = $li.children('a'),                $sub = $li.children('ul'),                is_root_element = $li.parent().is('.navbar-nav');            $li.addClass('has-sub');            $a.on('click', function(ev) {                if (isxs()) {                    ev.preventDefault();                    if (true) {                        sidebar_menu_close_items_siblings($li);                    }                    if ($li.hasClass('expanded') || $li.hasClass('opened'))                        sidebar_menu_item_collapse($li, $sub);                    else                        sidebar_menu_item_expand($li, $sub);                }            });            if (click_to_expand) {                $a.on('click', function(ev) {                    ev.preventDefault();                    if (isxs())                        return;                    if (is_root_element) {                        $items_with_subs.filter(function(i, el) {                            return jQuery(el).parent().is('.navbar-nav');                        }).not($li).removeClass('hover');                        $li.toggleClass('hover');                    } else {                        var sub_height;                        if ($li.hasClass('expanded') == false) {                            $li.addClass('expanded');                            $sub.addClass('is-visible');                            sub_height = $sub.outerHeight();                            $sub.height(0);                            TweenLite.to($sub, .15, {                                css: {                                    height: sub_height                                },                                ease: Sine.easeInOut,                                onComplete: function() {                                    $sub.attr('style', '');                                }                            });                            $li.siblings().find('> ul.is-visible').not($sub).each(function(i, el) {                                var $el = jQuery(el);                                sub_height = $el.outerHeight();                                $el.removeClass('is-visible').height(sub_height);                                $el.parent().removeClass('expanded');                                TweenLite.to($el, .15, {                                    css: {                                        height: 0                                    },                                    onComplete: function() {                                        $el.attr('style', '');                                    }                                });                            });                        } else {                            sub_height = $sub.outerHeight();                            $li.removeClass('expanded');                            $sub.removeClass('is-visible').height(sub_height);                            TweenLite.to($sub, .15, {                                css: {                                    height: 0                                },                                onComplete: function() {                                    $sub.attr('style', '');                                }                            });                        }                    }                });            } else {                $li.hoverIntent({                    over: function() {                        if (isxs())                            return;                        if (is_root_element) {                            $li.addClass('hover');                        } else {                            $sub.addClass('is-visible');                            sub_height = $sub.outerHeight();                            $sub.height(0);                            TweenLite.to($sub, .25, {                                css: {                                    height: sub_height                                },                                ease: Sine.easeInOut,                                onComplete: function() {                                    $sub.attr('style', '');                                }                            });                        }                    },                    out: function() {                        if (isxs())                            return;                        if (is_root_element) {                            $li.removeClass('hover');                        } else {                            sub_height = $sub.outerHeight();                            $li.removeClass('expanded');                            $sub.removeClass('is-visible').height(sub_height);                            TweenLite.to($sub, .25, {                                css: {                                    height: 0                                },                                onComplete: function() {                                    $sub.attr('style', '');                                }                            });                        }                    },                    timeout: 200,                    interval: is_root_element ? 10 : 100                });            }        });    }}function ps_update(destroy_init) {    if (isxs())        return;    if (jQuery.isFunction(jQuery.fn.perfectScrollbar)) {        if (public_vars.$sidebarMenu.hasClass('collapsed')) {            return;        }        public_vars.$sidebarMenu.find('.sidebar-menu-inner').perfectScrollbar('update');        if (destroy_init) {            ps_destroy();            ps_init();        }    }}function ps_init() {    if (isxs())        return;    if (jQuery.isFunction(jQuery.fn.perfectScrollbar)) {        if (public_vars.$sidebarMenu.hasClass('collapsed') || !public_vars.$sidebarMenu.hasClass('fixed')) {            return;        }        public_vars.$sidebarMenu.find('.sidebar-menu-inner').perfectScrollbar({            wheelSpeed: 1,            wheelPropagation: public_vars.wheelPropagation        });    }}function ps_destroy() {    if (jQuery.isFunction(jQuery.fn.perfectScrollbar)) {        public_vars.$sidebarMenu.find('.sidebar-menu-inner').perfectScrollbar('destroy');    }}function cbr_replace() {    var $inputs = jQuery('input[type="checkbox"].cbr, input[type="radio"].cbr').filter(':not(.cbr-done)'),        $wrapper = '<div class="cbr-replaced"><div class="cbr-input"></div><div class="cbr-state"><span></span></div></div>';    $inputs.each(function(i, el) {        var $el = jQuery(el),            is_radio = $el.is(':radio'),            is_checkbox = $el.is(':checkbox'),            is_disabled = $el.is(':disabled'),            styles = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'purple', 'blue', 'red', 'gray', 'pink', 'yellow', 'orange', 'turquoise'];        if (!is_radio && !is_checkbox)            return;        $el.after($wrapper);        $el.addClass('cbr-done');        var $wrp = $el.next();        $wrp.find('.cbr-input').append($el);        if (is_radio)            $wrp.addClass('cbr-radio');        if (is_disabled)            $wrp.addClass('cbr-disabled');        if ($el.is(':checked')) {            $wrp.addClass('cbr-checked');        }        jQuery.each(styles, function(key, val) {            var cbr_class = 'cbr-' + val;            if ($el.hasClass(cbr_class)) {                $wrp.addClass(cbr_class);                $el.removeClass(cbr_class);            }        });        $wrp.on('click', function(ev) {            if (is_radio && $el.prop('checked') || $wrp.parent().is('label'))                return;            if (jQuery(ev.target).is($el) == false) {                $el.prop('checked', !$el.is(':checked'));                $el.trigger('change');            }        });        $el.on('change', function(ev) {            $wrp.removeClass('cbr-checked');            if ($el.is(':checked'))                $wrp.addClass('cbr-checked');            cbr_recheck();        });    });}function cbr_recheck() {    var $inputs = jQuery("input.cbr-done");    $inputs.each(function(i, el) {        var $el = jQuery(el),            is_radio = $el.is(':radio'),            is_checkbox = $el.is(':checkbox'),            is_disabled = $el.is(':disabled'),            $wrp = $el.closest('.cbr-replaced');        if (is_disabled)            $wrp.addClass('cbr-disabled');        if (is_radio && !$el.prop('checked') && $wrp.hasClass('cbr-checked')) {            $wrp.removeClass('cbr-checked');        }    });}function attrDefault($el, data_var, default_val) {    if (typeof $el.data(data_var) != 'undefined') {        return $el.data(data_var);    }    return default_val;}function date(format, timestamp) {    var that = this;    var jsdate, f;    var txt_words = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];    var formatChr = /\\?(.?)/gi;    var formatChrCb = function(t, s) {        return f[t] ? f[t]() : s;    };    var _pad = function(n, c) {        n = String(n);        while (n.length < c) {            n = '0' + n;        }        return n;    };    f = {        d: function() {            return _pad(f.j(), 2);        },        D: function() {            return f.l().slice(0, 3);        },        j: function() {            return jsdate.getDate();        },        l: function() {            return txt_words[f.w()] + 'day';        },        N: function() {            return f.w() || 7;        },        S: function() {            var j = f.j();            var i = j % 10;            if (i <= 3 && parseInt((j % 100) / 10, 10) == 1) {                i = 0;            }            return ['st', 'nd', 'rd'][i - 1] || 'th';        },        w: function() {            return jsdate.getDay();        },        z: function() {            var a = new Date(f.Y(), f.n() - 1, f.j());            var b = new Date(f.Y(), 0, 1);            return Math.round((a - b) / 864e5);        },        W: function() {            var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);            var b = new Date(a.getFullYear(), 0, 4);            return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);        },        F: function() {            return txt_words[6 + f.n()];        },        m: function() {            return _pad(f.n(), 2);        },        M: function() {            return f.F().slice(0, 3);        },        n: function() {            return jsdate.getMonth() + 1;        },        t: function() {            return (new Date(f.Y(), f.n(), 0)).getDate();        },        L: function() {            var j = f.Y();            return j % 4 === 0 & j % 100 !== 0 | j % 400 === 0;        },        o: function() {            var n = f.n();            var W = f.W();            var Y = f.Y();            return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);        },        Y: function() {            return jsdate.getFullYear();        },        y: function() {            return f.Y().toString().slice(-2);        },        a: function() {            return jsdate.getHours() > 11 ? 'pm' : 'am';        },        A: function() {            return f.a().toUpperCase();        },        B: function() {            var H = jsdate.getUTCHours() * 36e2;            var i = jsdate.getUTCMinutes() * 60;            var s = jsdate.getUTCSeconds();            return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);        },        g: function() {            return f.G() % 12 || 12;        },        G: function() {            return jsdate.getHours();        },        h: function() {            return _pad(f.g(), 2);        },        H: function() {            return _pad(f.G(), 2);        },        i: function() {            return _pad(jsdate.getMinutes(), 2);        },        s: function() {            return _pad(jsdate.getSeconds(), 2);        },        u: function() {            return _pad(jsdate.getMilliseconds() * 1000, 6);        },        e: function() {            throw 'Not supported (see source code of date() for timezone on how to add support)';        },        I: function() {            var a = new Date(f.Y(), 0);            var c = Date.UTC(f.Y(), 0);            var b = new Date(f.Y(), 6);            var d = Date.UTC(f.Y(), 6);            return ((a - c) !== (b - d)) ? 1 : 0;        },        O: function() {            var tzo = jsdate.getTimezoneOffset();            var a = Math.abs(tzo);            return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4);        },        P: function() {            var O = f.O();            return (O.substr(0, 3) + ':' + O.substr(3, 2));        },        T: function() {            return 'UTC';        },        Z: function() {            return -jsdate.getTimezoneOffset() * 60;        },        c: function() {            return 'Y-m-d\\TH:i:sP'.replace(formatChr, formatChrCb);        },        r: function() {            return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);        },        U: function() {            return jsdate / 1000 | 0;        }    };    this.date = function(format, timestamp) {        that = this;        jsdate = (timestamp === undefined ? new Date() : (timestamp instanceof Date) ? new Date(timestamp) : new Date(timestamp * 1000));        return format.replace(formatChr, formatChrCb);    };    return this.date(format, timestamp);}